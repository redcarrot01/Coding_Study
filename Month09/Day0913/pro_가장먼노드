
3 프로그래머스 가장 먼노드 , 그래프 공부 좀 더 필요

# bfs이용
def solution(n, edge):
    # edge정보 [[3, 6], [4, 3], [3, 2], [1, 3], [1, 2], [2, 4], [5, 2]]
    # graph는 각 노드를 인덱스, 각 노드의 인접노드 표시
    # graph[[],[3, 2],[3, 1, 4, 5],[6, 4, 2, 1],[3,2],[2],[3]] 
    graph = [[] for i in range(n+1)]
    for i in range(len(edge)):
        if edge[i][1] not in graph[i]:
            graph[edge[i][0]].append(edge[i][1])

        if edge[i][0] not in graph[i]:
            graph[edge[i][1]].append(edge[i][0])    
            
    start=1
    queue=[start]
    # value는 간선의 값 
    value = [0] *(n+1)
    value[0] = -1
    value[start]=-1
    count =1
    
    
    while 0 in value:
        # bfs 돌때마다 탐색할 노드 
        new_arr = []
        # 처음시작 노드 : [1] -> [3,2]-> ...
        for start in queue:
            # grath[1]=[3,2] -> [3,1,4,5] -> ...
            for neighbor in graph[start]:
                if value[neighbor]==0:
                    # value[3]=1, value[2]=1 -> value[4]=2,value[5]=2
                    value[neighbor] +=count
                    new_arr.append(neighbor)
        count +=1
        queue = new_arr    
    return value.count(max(value))
