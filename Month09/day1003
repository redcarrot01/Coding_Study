# 14500 테트로미노

import sys

n = m = 0
arr = []
dx = [-1, 1, 0, 0] # 좌우
dy = [0, 0, -1, 1] # 위 아래
max_sum = 0
    
# ㅗ 제외한 최대 4개 짜리 탐색    
def dfs(x, y, visited, count, v_sum):
    global max_sum 
    
    if count== 4:
        if max_sum < v_sum:
            max_sum = v_sum
        return
    
    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        
        if 0<=nx and nx<n and 0<=ny and ny<m:
            if visited[nx][ny] == 0:
                visited[nx][ny] = 1
                dfs(nx, ny, visited, count+1, v_sum + arr[nx][ny])
                visited[nx][ny] = 0 # dfs돌렸으면 다음을 위해 초기화
                
# ㅗ 모양은 인접하지 않아 dfs 안됨
# ㅗ 에서 두 선분이 만나는 지점이 (x,y) 
def fuck(x, y):
    global max_sum
    v_sum = arr[x][y]
    
    # (x,y)가 모서리면 ㅗ모양은 불가능
    if x ==0: 
        if y==0 or y== m-1:
            return
        
    elif x == n-1:
        if y==0 or y== m-1:
            return
        
    # x나 y가 가장자리에 위치하면 ㅗ 모양은 하나며, 뒤집히거나 회전 안됨
    if x == 0:
        v_sum += arr[x+1][y] + arr[x][y-1]+ arr[x][y+1]
    elif x == n-1:
        v_sum += arr[x-1][y] + arr[x][y-1]+ arr[x][y+1]
    elif y == 0:
        v_sum += arr[x][y+1] + arr[x-1][y]+ arr[x+1][y]
    elif y == m-1:
        v_sum += arr[x][y-1] + arr[x-1][y]+ arr[x+1][y]
    
    
    # (x,y)가 안쪽에위치한 경우
    else:
        sum_list = []
        sum_list.append(v_sum + arr[x+1][y] + arr[x][y-1] + arr[x][y+1])
        sum_list.append(v_sum + arr[x-1][y] + arr[x][y-1]+ arr[x][y+1])
        sum_list.append(v_sum + arr[x][y+1] + arr[x-1][y]+ arr[x+1][y])
        sum_list.append(v_sum + arr[x][y-1] + arr[x-1][y]+ arr[x+1][y])
        v_sum = max(sum_list)
        
    if max_sum < v_sum:
            max_sum = v_sum

def solve():
    visited = [[0]* m for i in range(n) ]
    
    for i in range(n):
        for j in range(m):
            # ㅗ 특수하니까 먼저 탐색
            fuck(i, j)
            visited[i][j] = 1
            # 다른 모양들도 탐색하고 , 최대값 얻기
            dfs (i, j, visited , 1, arr[i][j])
            # 한 점에 대해 dfs fuck+dfs끝났으면 방문  다초기화
            visited[i][j] = 0
      
    
if __name__ == '__main__':
    n, m = map(int, sys.stdin.readline().split())
    #n,m = map(int, input().split())
    for i in range(n):
        arr.append(list(map(int, sys.stdin.readline().split()))) 
        
solve()
print(max_sum)
